"""CodeScanningChecker."""
from typing import List, Optional

from ghastoolkit import CodeAlert, CodeScanning, GitHub

from ghascompliance.policies.base import CodeScanningPolicy, Policy
from ghascompliance.checks.checker import Checker
from ghascompliance.octokit.octokit import Octokit
from ghascompliance.policies.severities import SeverityLevelEnum


class CodeScanningChecker(Checker):
    """Code Scanning checker."""

    def __init__(self, name: str, policy: Policy) -> None:
        """Initialise CodeScanningChecker."""
        self.code_scanning = CodeScanning()
        super().__init__(name, policy)

    def error(self, alert: CodeAlert, check_name: str = "na"):
        """Log a Code Scanning error."""
        err = f"{alert.tool_name} - {alert.created_at} - {alert.rule_id}"
        if Octokit.debugging_enabled():
            err += f" ({check_name})"
        self.state.error(err, check_name)

    def warning(self, alert: CodeAlert):
        """Warning."""
        self.state.warning(f"{alert.tool_name} - {alert.created_at} - {alert.rule_id}")

    def check(self):
        """Check Code Scanning alerts."""
        alerts = self.getAlerts()

        Octokit.info("Total Code Scanning Alerts :: " + str(len(alerts)))
        Octokit.debug(
            f"Total Code Scanning Policies :: {len(self.policy.codescanning)}"
        )

        for policy in self.policy.codescanning:
            # check: enabled
            if policy.enabled and self.code_scanning.isEnabled():
                self.state.critical(f"Code Scanning is not enabled")
                return

            # severities
            self.severities = SeverityLevelEnum.getSeveritiesFromName(
                policy.severity.value
            )

            # check: required tools
            if policy.tools_required:
                self.checkTools(policy.tools_required)

            # check: alerts
            for alert in alerts:
                self.checkCodeScanningAlert(policy, alert)

    def getAlerts(self) -> List[CodeAlert]:
        """Get Alerts from Code Scanning."""
        if GitHub.repository.isInPullRequest():
            Octokit.info("Code Scanning Alerts from Pull Request (alert diff)")
            pr_base = (
                GitHub.repository.getPullRequestInfo().get("base", {}).get("ref", "")
            )
            alerts: List[CodeAlert] = self.code_scanning.getAlertsInPR(pr_base)

        else:
            Octokit.debug(
                f"Code Scanning Alerts from reference :: {GitHub.repository.reference}"
            )
            alerts: List[CodeAlert] = self.code_scanning.getAlerts(
                "open", ref=GitHub.repository.reference
            )
        return alerts

    def checkCodeScanningAlert(self, policy: CodeScanningPolicy, alert: CodeAlert):
        """Check Code Scanning Alert to see if it violates the provided policy."""
        # check: tools
        if len(policy.tools) != 0:
            if alert.tool_name not in policy.tools:
                Octokit.debug(f"Alert wasn't generated by the required tool")
                return

        # check: severity
        if alert.severity in self.severities:
            self.error(alert, "severity")
            return

        # check: ignore ids
        alert_id = alert.rule_id
        if self.matchContent(alert_id, policy.ids_ignores):
            self.state.ignore("", "id-match")
            return
        # check: warning ids
        if self.matchContent(alert_id, policy.ids_warnings):
            self.warning(alert)
            return
        # check: ids to error on
        if self.matchContent(alert_id, policy.ids):
            self.error(alert, "id-match")
            return

        # check: names / description
        if self.matchContent(alert.description, policy.names):
            self.error(alert)
            return

        # TODO cwes

        # TODO owasp

        return

    def checkTools(self, tools: List[str]):
        """Check list of tools."""
        cstools = self.code_scanning.getTools()
        for tool in tools:
            if tool in cstools:
                continue

            self.state.error(f"Required tool missing :: {tool}")

        return
