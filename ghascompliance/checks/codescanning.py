from typing import List

from ghastoolkit import CodeAlert, CodeScanning, GitHub

from ghascompliance.policies.base import CodeScanningPolicy
from ghascompliance.checks.checker import Checker
from ghascompliance.octokit.octokit import Octokit
from ghascompliance.policies.severities import SeverityLevelEnum


class CodeScanningChecker(Checker):
    def enabled(self) -> bool:
        """Check to see if code scanning is enabled in the policy"""
        if isinstance(self.policy.codescanning, (list)):
            return True  # assume that as list is enabled
        else:
            return self.policy.codescanning.enabled

    def error(self, alert: CodeAlert):
        self.state.error(f"{alert.tool_name} - {alert.created_at} - {alert.rule_id}")

    def warning(self, alert: CodeAlert):
        self.state.warning(f"{alert.tool_name} - {alert.created_at} - {alert.rule_id}")

    def check(self):
        """Check Code Scanning alerts"""
        alerts = self.getAlerts()
        Octokit.info("Total Code Scanning Alerts :: " + str(len(alerts)))

        policies: List[CodeScanningPolicy] = []
        Octokit.debug(f"Total Code Scanning Policies :: {len(policies)}")

        if isinstance(self.policy.codescanning, CodeScanningPolicy):
            policies.append(self.policy.codescanning)
        else:
            policies.extend(self.policy.codescanning)

        for policy in policies:
            severities = SeverityLevelEnum.getSeveritiesFromName(policy.severity.value)
            # TODO required tools

            for alert in alerts:
                self.checkCodeScanningAlert(policy, alert, severities)

    def getAlerts(self) -> List[CodeAlert]:
        """Get Alerts from Code Scanning"""
        codescanning = CodeScanning()

        if GitHub.repository.isInPullRequest():
            Octokit.info("Code Scanning Alerts from Pull Request (alert diff)")
            pr_base = (
                GitHub.repository.getPullRequestInfo().get("base", {}).get("ref", "")
            )
            alerts: List[CodeAlert] = codescanning.getAlertsInPR(pr_base)

        else:
            Octokit.debug(
                f"Code Scanning Alerts from reference :: {GitHub.repository.reference}"
            )
            alerts: List[CodeAlert] = codescanning.getAlerts(
                "open", ref=GitHub.repository.reference
            )
        return alerts

    def checkCodeScanningAlert(
        self, policy: CodeScanningPolicy, alert: CodeAlert, severities: List = []
    ):
        # tools
        if len(policy.tools) != 0:
            if alert.tool_name not in policy.tools:
                Octokit.debug(f"Alert wasn't generated by the required tool")
                return

        # ignore ids
        alert_id = alert.rule_id
        if self.matchContent(alert_id, policy.ids_ignores):
            return
        # warning ids
        if self.matchContent(alert_id, policy.ids_warnings):
            self.warning(alert)
            return

        if self.matchContent(alert_id, policy.ids):
            self.error(alert)
            return

        # names
        if self.matchContent(alert.description, policy.names):
            self.error(alert)
            return

        # severity
        if alert.severity in severities:
            self.error(alert)
            return

        # TODO cwes

        # TODO owasp

        return
